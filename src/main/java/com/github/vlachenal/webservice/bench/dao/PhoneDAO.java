/*
 * Copyright Â© 2017 Vincent Lachenal
 * This work is free. You can redistribute it and/or modify it under the
 * terms of the Do What The Fuck You Want To Public License, Version 2,
 * as published by Sam Hocevar. See the COPYING file for more details.
 */
package com.github.vlachenal.webservice.bench.dao;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.UUID;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import com.github.vlachenal.webservice.bench.dto.PhoneDTO;


/**
 * Phone DAO
 *
 * @author Vincent Lachenal
 */
@Repository
public class PhoneDAO {

  // Attributes +
  // SQL requests +
  /** Insert phone in database */
  public static final String REQ_ADD_PHONE = "INSERT INTO Phone "
      + "(customer_id,phone_type,number) "
      + "VALUES (?,?,?)";

  /** Insert phone in database */
  private static final String REQ_ADD_PHONE_UUID = "INSERT INTO Phone "
      + "(customer_id,phone_type,number,id) "
      + "VALUES (?,?,?,?)";

  /** Get customer phone SQL request */
  private static final String REQ_GET_CUST_PHONE = "SELECT id,phone_type,number FROM phone WHERE id = ? AND customer_id = ?";

  /** Get customer phones SQL request */
  private static final String REQ_GET_CUST_PHONES = "SELECT id,phone_type,number FROM phone WHERE customer_id = ?";

  /** Delete phone */
  private static final String REQ_DELETE_PHONE = "DELETE FROM phone WHERE id = ? AND customer_id = ?";
  // SQL requests -

  /** JDBC template */
  private JdbcTemplate jdbc;
  // Attributes -


  // Methods +
  /**
   * Initialize JDBC template with datasource
   *
   * @param dataSource the datasource to use
   */
  @Autowired
  public void setDataSource(@Qualifier("ds.customer") final DataSource dataSource) {
    jdbc = new JdbcTemplate(dataSource);
  }

  /**
   * Get customer's phones
   *
   * @param customerId the customer's identifier
   *
   * @return the customer's phones
   */
  public List<PhoneDTO> getPhones(final UUID customerId) {
    return jdbc.query(REQ_GET_CUST_PHONES, (res, rowNum) -> getPhone(res), customerId);
  }

  /**
   * Add phone to customer
   *
   * @param customerId the customer identifier
   * @param phone the phone to add
   */
  public String addPhone(final UUID customerId, final PhoneDTO phone) {
    final UUID phoneId = UUID.randomUUID();
    jdbc.update(REQ_ADD_PHONE_UUID, stmt -> setPhoneValues(stmt, phoneId, customerId, phone));
    return phoneId.toString();
  }

  /**
   * Set phone values in prepared statement for insertion.<br>
   * New phone's identifier will be generated by database engine and will not be returned.
   *
   * @param stmt the prepared statement
   * @param customerId the customer's identifier
   * @param phone the phone
   *
   * @throws SQLException any SQL error
   */
  public void setPhoneValues(final PreparedStatement stmt, final UUID customerId, final PhoneDTO phone) throws SQLException {
    setPhoneValues(stmt, null, customerId, phone);
  }

  /**
   * Set phone values in prepared statement for insertion
   *
   * @param stmt the prepared statement
   * @param phoneId the new phone identifier (can be {@code null})
   * @param customerId the customer identifier
   * @param phone the phone
   *
   * @throws SQLException any SQL error
   */
  private void setPhoneValues(final PreparedStatement stmt, final UUID phoneId, final UUID customerId, final PhoneDTO phone) throws SQLException {
    stmt.setObject(1, customerId);
    stmt.setShort(2, phone.getType().getCode());
    stmt.setString(3, phone.getNumber());
    if(phoneId != null) {
      stmt.setObject(4, phoneId);
    }
  }

  /**
   * Extract phone from result set
   *
   * @param res the result set
   *
   * @return the phone
   *
   * @throws SQLException any SQL error
   */
  public PhoneDTO getPhone(final ResultSet res) throws SQLException {
    final PhoneDTO phone = new PhoneDTO();
    phone.setId(res.getString(1));
    phone.setType(PhoneDTO.Type.fromCode(res.getShort(2)));
    phone.setNumber(res.getString(3).trim());
    return phone;
  }

  /**
   * Get phone
   *
   * @param phoneId the phone identifier
   * @param customerId the customer identifier
   *
   * @return the phone
   */
  public PhoneDTO getPhone(final UUID phoneId, final UUID customerId) {
    return jdbc.query(REQ_GET_CUST_PHONE, res -> {
      if(res.next()) {
        return getPhone(res);
      } else {
        return null;
      }
    }, phoneId, customerId);
  }

  /**
   * Delete phone
   *
   * @param phoneId the phone identifier
   * @param customerId the customer identifier
   */
  public void deletePhone(final UUID phoneId, final UUID customerId) {
    jdbc.update(REQ_DELETE_PHONE, phoneId, customerId);
  }
  // Methods -

}
